// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid()) @db.Uuid
    userId            String  @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid()) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                     String    @id @default(uuid()) @db.Uuid
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    // password               String?
    accounts               Account[]
    sessions               Session[]
    stripeCustomerId       String?
    stripeSubscriptionId   String?   @unique
    stripePriceId          String?
    stripeCurrentPeriodEnd DateTime?

    isAdmin Boolean @default(false)
}

model VerificationToken {
    id         String   @id @default(uuid()) @db.Uuid
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Waitlist {
    id        String   @id @default(uuid()) @db.Uuid
    email     String?  @unique
    createdAt DateTime @default(now())
}

model Ticket {
    id          String       @id @default(uuid()) @db.Uuid
    email       String?
    problem     String?
    severity    String?
    subject     String?
    description String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    status      TicketStatus @default(OPEN)
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    CLOSED
    PENDING
}
